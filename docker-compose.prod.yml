version: "3.8"

services:
  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - traefik_letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - "traefik.enable=true"
      # Dashboard
      - "traefik.http.routers.dashboard.rule=Host(`traefik.radhe.space`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls.certresolver=myresolver"
      - "traefik.http.routers.dashboard.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_DASHBOARD_AUTH}"
    networks:
      - traefik_network

  backend:
    build:
      context: .
      dockerfile: docker/prod/backend.dockerfile
    container_name: backend
    restart: unless-stopped
    environment:
      # Database
      POSTGRES_SERVER: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
      # Backend
      BACKEND_CORS_ORIGINS: ${BACKEND_CORS_ORIGINS}
      SECRET_KEY: ${SECRET_KEY}
      PROJECT_NAME: ${PROJECT_NAME}
      # S3/MinIO
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_HOST: ${MINIO_HOST}
      MINIO_PORT: ${MINIO_PORT}
      # Redis
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      # OpenSearch
      OPENSEARCH_HOST: ${OPENSEARCH_HOST}
      OPENSEARCH_PORT: ${OPENSEARCH_PORT}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.radhe.space`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=myresolver"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
      # HTTP -> HTTPS redirect
      - "traefik.http.routers.backend_insecure.rule=Host(`api.radhe.space`)"
      - "traefik.http.routers.backend_insecure.entrypoints=web"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.backend_insecure.middlewares=redirect-to-https"
    networks:
      - traefik_network

  db:
    image: pgvector/pgvector:pg16
    container_name: db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - traefik_network

  redis:
    image: redis:alpine
    container_name: redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - traefik_network

  minio:
    image: minio/minio
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    labels:
      # MinIO API
      - "traefik.enable=true"
      - "traefik.http.routers.minio-api.rule=Host(`minio.radhe.space`) && PathPrefix(`/api/`)"
      - "traefik.http.routers.minio-api.entrypoints=websecure"
      - "traefik.http.routers.minio-api.tls.certresolver=myresolver"
      - "traefik.http.services.minio-api.loadbalancer.server.port=9000"
      # MinIO Console
      - "traefik.http.routers.minio-console.rule=Host(`minio.radhe.space`)"
      - "traefik.http.routers.minio-console.entrypoints=websecure"
      - "traefik.http.routers.minio-console.tls.certresolver=myresolver"
      - "traefik.http.services.minio-console.loadbalancer.server.port=9001"
    networks:
      - traefik_network

  opensearch:
    image: opensearchproject/opensearch:2.11.1
    container_name: opensearch
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m
      - DISABLE_SECURITY_PLUGIN=true
      - DISABLE_INSTALL_DEMO_CONFIG=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    networks:
      - traefik_network
    volumes:
      - opensearch_data:/usr/share/opensearch/data

  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:2.11.1
    container_name: opensearch-dashboards
    environment:
      - 'OPENSEARCH_HOSTS=["http://opensearch:9200"]'
      - DISABLE_SECURITY_DASHBOARDS_PLUGIN=true
    depends_on:
      - opensearch
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.opensearch-dashboard.rule=Host(`search.radhe.space`)"
      - "traefik.http.routers.opensearch-dashboard.entrypoints=websecure"
      - "traefik.http.routers.opensearch-dashboard.tls.certresolver=myresolver"
      - "traefik.http.services.opensearch-dashboard.loadbalancer.server.port=5601"
    networks:
      - traefik_network

  celery_worker:
    build:
      context: .
      dockerfile: docker/prod/backend.dockerfile
    container_name: celery_worker
    restart: unless-stopped
    command: celery -A celery_worker worker --loglevel=info
    environment:
      # Database
      POSTGRES_SERVER: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
      # Redis
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      # MinIO
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_HOST: ${MINIO_HOST}
      MINIO_PORT: ${MINIO_PORT}
    depends_on:
      backend:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - traefik_network

  flower:
    build:
      context: .
      dockerfile: docker/prod/backend.dockerfile
    container_name: flower
    restart: unless-stopped
    command: celery -A celery_worker flower --port=5555 --basic_auth=${FLOWER_USER}:${FLOWER_PASSWORD}
    environment:
      # Redis
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      # Flower
      FLOWER_USER: ${FLOWER_USER}
      FLOWER_PASSWORD: ${FLOWER_PASSWORD}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      redis:
        condition: service_healthy
      celery_worker:
        condition: service_started
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.flower.rule=Host(`flower.radhe.space`)"
      - "traefik.http.routers.flower.entrypoints=websecure"
      - "traefik.http.routers.flower.tls.certresolver=myresolver"
      - "traefik.http.services.flower.loadbalancer.server.port=5555"
    networks:
      - traefik_network

  frontend:
    build:
      context: .
      dockerfile: docker/prod/frontend.dockerfile
    container_name: frontend
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: "https://api.radhe.space"
      NEXT_PUBLIC_APP_NAME: ${NEXT_PUBLIC_APP_NAME}
      # add others as needed
    depends_on:
      - backend
    labels:
      # Host-based routing (example: www.radhe.space)
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`www.radhe.space`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
      - "traefik.http.routers.frontend_insecure.rule=Host(`www.radhe.space`)"
      - "traefik.http.routers.frontend_insecure.entrypoints=web"
      - "traefik.http.routers.frontend_insecure.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
    networks:
      - traefik_network

networks:
  traefik_network:
    driver: bridge

volumes:
  postgres_data:
  minio_data:
  opensearch_data:
  traefik_letsencrypt:
    external: false
